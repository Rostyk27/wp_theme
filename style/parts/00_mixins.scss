// mixins & vendors

// responsive fonts + padding & margin !!!
/// Strips the unit from a number.
@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}
// Convert pixels to rems
// eg. for a relational value of 12px write rem(12)
// Assumes $fb is the font-size of <html>
@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  $base: $fb;
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1rem;
}

@mixin rwd-max($px) {
  $min-width: #{$px}px;
  @media screen and (max-width: $min-width) {@content}
}
@mixin rwd-min($px) {
  $min-width: #{$px}px;
  @media screen and (min-width: $min-width) {@content}
}
@mixin rwd-range($px, $px2) {
  $max-width: #{$px}px;
  $min-width: #{$px2}px;
  @media screen and (max-width: $max-width) and (min-width: $min-width) {@content}
}

@mixin prefixer($property, $value){
  -webkit-#{$property}: #{$value};
  #{$property}: #{$value}
}

@mixin columns($count: 2, $gap: 0) {
  -webkit-column-count: $count;
  -moz-column-count: $count;
  column-count: $count;
  -webkit-column-gap: $gap;
  -moz-column-gap: $gap;
  column-gap: $gap;
  > * {
    break-inside: avoid;
    page-break-inside: avoid;
    -webkit-column-break-inside: avoid;
  }
}

@mixin transition($property: all, $duration: 0.3s, $easing: ease, $delay: 0s) {
  $transitions: ($property $duration $easing $delay);
  @include prefixer('transition', $transitions);
}

@mixin transform($params) {
  @include prefixer('transform', $params);
}

@mixin gradient($angle: 90deg, $colors...) {
  background-image: -webkit-linear-gradient(90 - $angle + 360, $colors);
  background-image: linear-gradient($angle, $colors);
}

@mixin center($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
  } @else if ($horizontal) {
    left: 50%;
    @include transform(translate(-50%, 0));
  } @else if ($vertical) {
    top: 50%;
    @include transform(translate(0, -50%));
  }
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}
@mixin animation($str) {
  @include prefixer('animation', $str);
}

@mixin placeholder {
  &::-webkit-input-placeholder { @content; }
  &:-moz-placeholder           { @content; }
  &::-moz-placeholder          { @content; }
  &:-ms-input-placeholder      { @content; }
}

@mixin hover {
  &:active {@content}
  @include rwd-min(1025) {
    &:hover {@content}
  }
}

//SCSS Triangle
@mixin triangle ($width:12px, $height:10px, $cl:#000, $direction: top) {
  position: absolute;
  content: '';
  height: 0;
  width: 0;

  @if $direction == top {
    border-top: 0;
    border-left: $width solid transparent;
    border-right: $width solid transparent;
    border-bottom: $height solid $cl;
    top: -$height;
    left: 50%;
    @include transform(translateX(-50%));
  } @else if $direction == right {
    border-right: 0;
    border-top: $width solid transparent;
    border-bottom: $width solid transparent;
    border-left: $height solid $cl;
    right: -$height;
    top: 50%;
    @include transform(translateY(-50%));
  } @else if $direction == bottom {
    border-bottom: 0;
    border-left: $width solid transparent;
    border-right: $width solid transparent;
    border-top: $height solid $cl;
    bottom: -$height;
    left: 50%;
    @include transform(translateX(-50%));
  } @else {
    border-left: 0;
    border-top: $width solid transparent;
    border-bottom: $width solid transparent;
    border-right: $height solid $cl;
    left: -$height;
    top: 50%;
    @include transform(translateY(-50%));
  }
}


// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox

@mixin flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

// Values: row | row-reverse | column | column-reverse
// Default: row
@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: nowrap;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

// Default: 0
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

// Default: 0
@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

// Default: 1
@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

// Values: Like "width"
// Default: auto
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
@mixin flex($fg: 1, $fs: null, $fb: null) {
  $fg-boxflex: $fg;
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }
  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}

// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}

// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}
